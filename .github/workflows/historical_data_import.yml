name: Historical Data Import

on:
  workflow_dispatch:  # 仅允许手动触发
    inputs:
      start_date:
        description: '开始日期 (YYYY-MM-DD)'
        required: false
        default: '2024-06-08'
      end_date:
        description: '结束日期 (YYYY-MM-DD)'
        required: false
        default: '2025-03-25'
      start_chunk:
        description: '开始处理的块ID'
        required: false
        default: '0'
      end_chunk:
        description: '结束处理的块ID'
        required: false
        default: ''
      batch_size:
        description: '每批处理的域名数量'
        required: false
        default: '5000'
      retry_failed:
        description: '重试失败的块 (true/false)'
        required: false
        default: 'false'

jobs:
  import_historical_data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史记录，以便访问所有提交

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 psutil gitpython pandas pyarrow

      # 创建历史数据目录
      - name: Create historical data directory
        run: |
          mkdir -p historical_extracts
          
          # 如果没有prepare_commits.py，则直接从Git历史中获取日期
          if [ ! -f "prepare_commits.py" ]; then
            echo "直接从Git历史中获取日期范围"
            START_DATE="${{ github.event.inputs.start_date }}"
            END_DATE="${{ github.event.inputs.end_date }}"
            
            # 获取日期范围内的所有提交
            git log --after="${START_DATE}" --before="${END_DATE}" --format="%H %cs" > commit_list.txt
            
            # 为每个提交创建目录
            while read -r commit_hash commit_date; do
              mkdir -p "historical_extracts/${commit_date}"
              echo "${commit_hash}" > "historical_extracts/${commit_date}/commit_hash.txt"
            done < commit_list.txt
          else
            # 如果存在prepare_commits.py，则使用它
            python prepare_commits.py --start-date "${{ github.event.inputs.start_date }}" --end-date "${{ github.event.inputs.end_date }}"
          fi

      # 运行分块导入
      - name: Run chunked import
        run: |
          RETRY_FLAG=""
          if [ "${{ github.event.inputs.retry_failed }}" = "true" ]; then
            RETRY_FLAG="--retry-failed"
          fi
          
          START_CHUNK=""
          if [ ! -z "${{ github.event.inputs.start_chunk }}" ]; then
            START_CHUNK="--start-chunk ${{ github.event.inputs.start_chunk }}"
          fi
          
          END_CHUNK=""
          if [ ! -z "${{ github.event.inputs.end_chunk }}" ]; then
            END_CHUNK="--end-chunk ${{ github.event.inputs.end_chunk }}"
          fi
          
          python run_chunked_import.py $START_CHUNK $END_CHUNK --batch-size ${{ github.event.inputs.batch_size }} $RETRY_FLAG

      # 提交结果
      - name: Commit results
        run: |
          python commit_results.py

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main