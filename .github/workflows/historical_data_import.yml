name: Historical Data Import

on:
  workflow_dispatch:  # 仅允许手动触发
    inputs:
      start_date:
        description: '开始日期 (YYYY-MM-DD)'
        required: false
        default: '2024-06-08'
      end_date:
        description: '结束日期 (YYYY-MM-DD)'
        required: false
        default: '2025-03-25'
      batch_size:
        description: '每批处理的域名数量'
        required: false
        default: '500000'
      retry_failed:
        description: '重试失败的块 (true/false)'
        required: false
        default: 'false'

jobs:
  import_historical_data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史记录，以便访问所有提交

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 psutil gitpython pandas pyarrow python-magic

      # 验证和准备数据文件
      - name: Verify and prepare data files
        run: |
          # 创建历史数据目录
          mkdir -p historical_extracts
          
          # 使用run_chunked_import.py脚本验证数据文件
          echo "验证数据文件..."
          python run_chunked_import.py --verify-data
          
          # 列出创建的目录和文件
          echo "创建的目录和文件列表:"
          find historical_extracts -type f | sort

      # 运行分块导入
      - name: Run chunked import
        run: |
          # 设置重试标志
          RETRY_FLAG=""
          if [ "${{ github.event.inputs.retry_failed }}" = "true" ]; then
            RETRY_FLAG="--retry-failed"
          fi
          
          # 运行导入脚本 - 让脚本自动确定块参数
          echo "运行导入脚本..."
          python run_chunked_import.py --auto-chunks --batch-size ${{ github.event.inputs.batch_size }} ${RETRY_FLAG}

      # 生成每日新域名文件
      - name: Generate daily new domains files
        run: |
          echo "生成每日新域名文件..."
          python run_chunked_import.py --generate-new-domains

      # 提交结果
      - name: Commit results
        run: |
          # 检查结果文件
          echo "检查结果文件..."
          
          # 列出当前目录文件
          echo "当前目录文件列表:"
          ls -la
          
          if [ -f "domains_rankings.parquet" ] && [ -f "domains_first_seen.parquet" ]; then
            echo "结果文件存在，准备提交..."
            
            # 配置Git
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"
            
            # 显示Git状态
            echo "提交前Git状态:"
            git status
            
            # 强制添加所有生成的文件
            echo "添加文件到Git..."
            git add -f domains_rankings.parquet
            git add -f domains_first_seen.parquet
            
            # 检查new_domains目录是否存在
            if [ -d "new_domains" ]; then
              echo "添加new_domains目录..."
              git add -f new_domains/
            else
              echo "警告: new_domains目录不存在"
              mkdir -p new_domains
              echo "创建了空的new_domains目录"
              git add -f new_domains/
            fi
            
            # 再次显示Git状态
            echo "添加文件后Git状态:"
            git status
            
            # 检查是否有更改
            CHANGES=$(git status --porcelain | grep -v '??' | wc -l)
            echo "检测到 ${CHANGES} 个已暂存的更改"
            
            if [ "$CHANGES" -gt 0 ]; then
              echo "提交更改..."
              git commit -m "Import historical domain rank data and generate new domains files"
              echo "提交成功"
            else
              echo "没有已暂存的更改，尝试强制提交..."
              # 尝试强制提交
              touch .gitkeep
              git add .gitkeep
              git commit -m "Import historical domain rank data (force commit)"
              rm .gitkeep
            fi
          else
            echo "结果文件不存在，跳过提交"
            ls -la
          fi

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main