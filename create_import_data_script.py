def create_import_data_script():
    """创建导入历史数据的脚本"""
    script_lines = [
        "#!/usr/bin/env python3",
        "# -*- coding: utf-8 -*-",
        "",
        "import os",
        "import sys",
        "import subprocess",
        "import time",
        "import logging",
        "import signal",
        "from datetime import datetime",
        "",
        "# 配置日志",
        "logging.basicConfig(",
        "    level=logging.INFO,",
        "    format='%(asctime)s - %(levelname)s - %(message)s',",
        "    datefmt='%Y-%m-%d %H:%M:%S'",
        ")",
        "",
        "# 定义超时处理函数",
        "class TimeoutError(Exception):",
        "    pass",
        "",
        "def timeout_handler(signum, frame):",
        "    raise TimeoutError(\"操作超时\")",
        "",
        "def run_command_with_timeout(cmd, timeout=60, shell=True, check=True, capture_output=True, text=True):",
        "    \"\"\"运行命令并设置超时时间\"\"\"",
        "    logging.info(f\"执行命令: {cmd}\")",
        "    try:",
        "        # 设置超时信号处理器",
        "        signal.signal(signal.SIGALRM, timeout_handler)",
        "        signal.alarm(timeout)",
        "        ",
        "        result = subprocess.run(cmd, shell=shell, check=check, capture_output=capture_output, text=text)",
        "        ",
        "        # 取消超时信号",
        "        signal.alarm(0)",
        "        return result",
        "    except TimeoutError:",
        "        logging.error(f\"命令执行超时: {cmd}\")",
        "        return None",
        "    except Exception as e:",
        "        logging.error(f\"命令执行错误: {e}\")",
        "        return None",
        "",
        "def main():",
        "    logging.info(\"开始导入历史数据...\")",
        "    ",
        "    # 运行导入脚本，添加批处理大小参数",
        "    try:",
        "        logging.info(\"执行导入脚本...\")",
        "        result = run_command_with_timeout('python import_historical_data.py --batch-size 5000', timeout=300)",
        "        if result and result.returncode == 0:",
        "            logging.info(\"历史数据导入完成\")",
        "        else:",
        "            logging.error(\"导入脚本执行失败或超时\")",
        "            if result:",
        "                logging.error(f\"输出: {result.stdout}\\n错误: {result.stderr}\")",
        "            sys.exit(1)",
        "    except Exception as e:",
        "        logging.error(f\"导入过程中发生错误: {e}\")",
        "        sys.exit(1)",
        "    ",
        "    logging.info(\"检查导入结果文件...\")",
        "    if not os.path.exists('domains_rankings.parquet') or not os.path.exists('domains_first_seen.parquet'):",
        "        logging.error(\"导入结果文件不存在，跳过Git操作\")",
        "        sys.exit(1)",
        "    ",
        "    # 提交更改",
        "    try:",
        "        # 配置Git",
        "        logging.info(\"配置Git用户信息...\")",
        "        run_command_with_timeout('git config --local user.email \"actions@github.com\"', timeout=10)",
        "        run_command_with_timeout('git config --local user.name \"GitHub Actions\"', timeout=10)",
        "        ",
        "        # 检查Git状态",
        "        logging.info(\"检查Git状态...\")",
        "        status_result = run_command_with_timeout('git status', timeout=10)",
        "        if status_result:",
        "            logging.info(f\"Git状态: {status_result.stdout}\")",
        "        ",
        "        # 添加文件",
        "        logging.info(\"添加文件到Git...\")",
        "        add_result = run_command_with_timeout('git add domains_rankings.parquet domains_first_seen.parquet', timeout=30)",
        "        if add_result and add_result.returncode == 0:",
        "            logging.info(\"文件添加成功\")",
        "        else:",
        "            logging.error(\"文件添加失败\")",
        "            if add_result:",
        "                logging.error(f\"错误: {add_result.stderr}\")",
        "        ",
        "        # 提交更改",
        "        logging.info(\"提交更改到Git...\")",
        "        commit_result = run_command_with_timeout('git commit -m \"Import historical domain rank data\"', timeout=30)",
        "        if commit_result:",
        "            if commit_result.returncode == 0:",
        "                logging.info(\"更改已提交\")",
        "                ",
        "                # 推送更改",
        "                logging.info(\"推送更改到远程仓库...\")",
        "                push_result = run_command_with_timeout('git push', timeout=60)",
        "                if push_result and push_result.returncode == 0:",
        "                    logging.info(\"更改已推送到远程仓库\")",
        "                else:",
        "                    logging.error(\"推送失败\")",
        "                    if push_result:",
        "                        logging.error(f\"输出: {push_result.stdout}\\n错误: {push_result.stderr}\")",
        "            else:",
        "                logging.info(f\"没有更改需要提交: {commit_result.stdout}\\n{commit_result.stderr}\")",
        "    except Exception as e:",
        "        logging.error(f\"Git操作过程中发生错误: {e}\")",
        "    ",
        "    logging.info(\"导入和提交过程完成\")",
        "",
        "if __name__ == \"__main__\":",
        "    main()"
    ]
    
    # 写入文件
    with open('import_data.py', 'w', encoding='utf-8') as f:
        for line in script_lines:
            f.write(line + '\n')
    
    print("已创建 import_data.py 脚本")