def create_import_data_script():
    """创建导入历史数据的脚本"""
    script_lines = [
        "#!/usr/bin/env python3",
        "# -*- coding: utf-8 -*-",
        "",
        "import os",
        "import sys",
        "import subprocess",
        "import time",
        "import logging",
        "from datetime import datetime",
        "",
        "# 配置日志",
        "logging.basicConfig(",
        "    level=logging.INFO,",
        "    format='%(asctime)s - %(levelname)s - %(message)s',",
        "    datefmt='%Y-%m-%d %H:%M:%S'",
        ")",
        "",
        "def main():",
        "    logging.info(\"开始导入历史数据...\")",
        "    ",
        "    # 运行导入脚本，添加批处理大小参数",
        "    try:",
        "        logging.info(\"执行导入脚本...\")",
        "        result = subprocess.run('python import_historical_data.py --batch-size 5000', shell=True, check=True)",
        "        logging.info(\"历史数据导入完成\")",
        "    except subprocess.CalledProcessError as e:",
        "        logging.error(f\"导入历史数据失败: {e}\")",
        "        sys.exit(1)",
        "    except Exception as e:",
        "        logging.error(f\"导入过程中发生错误: {e}\")",
        "        sys.exit(1)",
        "    ",
        "    # 提交更改",
        "    try:",
        "        # 配置Git",
        "        logging.info(\"配置Git用户信息...\")",
        "        subprocess.run('git config --local user.email \"actions@github.com\"', shell=True, check=True)",
        "        subprocess.run('git config --local user.name \"GitHub Actions\"', shell=True, check=True)",
        "        ",
        "        # 添加文件",
        "        logging.info(\"添加文件到Git...\")",
        "        subprocess.run('git add domains_rankings.parquet domains_first_seen.parquet', shell=True, check=True)",
        "        ",
        "        # 提交更改",
        "        logging.info(\"提交更改到Git...\")",
        "        result = subprocess.run('git commit -m \"Import historical domain rank data\"', shell=True, capture_output=True, text=True)",
        "        if result.returncode != 0:",
        "            logging.info(f\"没有更改需要提交: {result.stdout}\\n{result.stderr}\")",
        "        else:",
        "            logging.info(\"更改已提交\")",
        "            ",
        "            # 推送更改",
        "            logging.info(\"推送更改到远程仓库...\")",
        "            push_result = subprocess.run('git push', shell=True, capture_output=True, text=True)",
        "            if push_result.returncode == 0:",
        "                logging.info(\"更改已推送到远程仓库\")",
        "            else:",
        "                logging.error(f\"推送失败: {push_result.stdout}\\n{push_result.stderr}\")",
        "    except subprocess.CalledProcessError as e:",
        "        logging.error(f\"提交更改失败: {e}\")",
        "    except Exception as e:",
        "        logging.error(f\"提交过程中发生错误: {e}\")",
        "    ",
        "    logging.info(\"导入和提交过程完成\")",
        "",
        "if __name__ == \"__main__\":",
        "    main()"
    ]
    
    # 写入文件
    with open('import_data.py', 'w', encoding='utf-8') as f:
        for line in script_lines:
            f.write(line + '\n')
    
    print("已创建 import_data.py 脚本")